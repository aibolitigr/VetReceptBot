import logging
import asyncio
import datetime
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.enums import ParseMode
from aiogram.filters import Command
from docx import Document

# üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7759754415:AAE2UWgC_B9lx-DV4TG-57JsyZS4qES9LjY"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π
menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìù –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç")]],
    resize_keyboard=True
)

user_data = {}

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n–ù–∞–∂–º–∏ 'üìù –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç' –∏–ª–∏ –≤–≤–µ–¥–∏ /new_recipe", reply_markup=menu)

@router.message(lambda message: message.text == "üìù –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç" or message.text == "/new_recipe")
async def ask_instance_number(message: types.Message):
    user_data[message.chat.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞:")

@router.message(lambda message: message.chat.id in user_data and "instance_number" not in user_data[message.chat.id])
async def ask_recipe_number(message: types.Message):
    user_data[message.chat.id]["instance_number"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞:")

@router.message(lambda message: message.chat.id in user_data and "recipe_number" not in user_data[message.chat.id])
async def ask_owner(message: types.Message):
    user_data[message.chat.id]["recipe_number"] = message.text
    user_data[message.chat.id]["date"] = datetime.datetime.now().strftime("%d.%m.%Y")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–¥—Ä–µ—Å:")

@router.message(lambda message: message.chat.id in user_data and "owner_name" not in user_data[message.chat.id])
async def ask_pet_info(message: types.Message):
    user_data[message.chat.id]["owner_name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –∫–ª–∏—á–∫—É –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:")

@router.message(lambda message: message.chat.id in user_data and "pet_info" not in user_data[message.chat.id])
async def ask_medicine(message: types.Message):
    user_data[message.chat.id]["pet_info"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å):")

@router.message(lambda message: message.chat.id in user_data and "medicine" not in user_data[message.chat.id])
async def ask_dosage(message: types.Message):
    user_data[message.chat.id]["medicine"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:")

@router.message(lambda message: message.chat.id in user_data and "dosage" not in user_data[message.chat.id])
async def ask_single_dose(message: types.Message):
    user_data[message.chat.id]["dosage"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–æ–≤—É—é –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:")

@router.message(lambda message: message.chat.id in user_data and "single_dose" not in user_data[message.chat.id])
async def ask_frequency(message: types.Message):
    user_data[message.chat.id]["single_dose"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏—ë–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:")

@router.message(lambda message: message.chat.id in user_data and "frequency" not in user_data[message.chat.id])
async def ask_time_of_day(message: types.Message):
    user_data[message.chat.id]["frequency"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ (—É—Ç—Ä–æ–º, –¥–Ω—ë–º, –≤–µ—á–µ—Ä–æ–º –∏ —Ç. –¥.):")

@router.message(lambda message: message.chat.id in user_data and "time_of_day" not in user_data[message.chat.id])
async def ask_duration(message: types.Message):
    user_data[message.chat.id]["time_of_day"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—ë–º–∞:")

@router.message(lambda message: message.chat.id in user_data and "duration" not in user_data[message.chat.id])
async def ask_method(message: types.Message):
    user_data[message.chat.id]["duration"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–µ–¥–µ–Ω–∏—è (–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ, –≤–Ω—É—Ç—Ä–∏–º—ã—à–µ—á–Ω–æ –∏ —Ç. –¥.):")

@router.message(lambda message: message.chat.id in user_data and "method" not in user_data[message.chat.id])
async def ask_feeding_time(message: types.Message):
    user_data[message.chat.id]["method"] = message.text
    await message.answer("–ü—Ä–µ–ø–∞—Ä–∞—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ, –≤–æ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ—Å–ª–µ –µ–¥—ã?")

@router.message(lambda message: message.chat.id in user_data and "feeding_time" not in user_data[message.chat.id])
async def ask_vet_name(message: types.Message):
    user_data[message.chat.id]["feeding_time"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞:")

@router.message(lambda message: message.chat.id in user_data and "vet_name" not in user_data[message.chat.id])
async def ask_expiry_date(message: types.Message):
    user_data[message.chat.id]["vet_name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")

@router.message(lambda message: message.chat.id in user_data and "expiry_date" not in user_data[message.chat.id])
async def finalize_recipe(message: types.Message):
    user_data[message.chat.id]["expiry_date"] = message.text
    template_path = "–ë–ª–∞–Ω–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º.docx"
    
    try:
        doc = Document(template_path)
        for paragraph in doc.paragraphs:
            for key, value in user_data[message.chat.id].items():
                if f"{{{key}}}" in paragraph.text:
                    paragraph.text = paragraph.text.replace(f"{{{key}}}", value)

        def sanitize_filename(filename):
            invalid_chars = '<>:"/\\|?*'
            for char in invalid_chars:
                filename = filename.replace(char, "_")
            return filename

        filename = sanitize_filename(
    f"–†–µ—Ü–µ–ø—Ç_{user_data[message.chat.id]['recipe_number']}_"
    f"{user_data[message.chat.id]['owner_name']}.docx"
)

        doc.save(filename)
        
        file = FSInputFile(filename)
        await message.answer_document(file)

        del user_data[message.chat.id]
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")

async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
